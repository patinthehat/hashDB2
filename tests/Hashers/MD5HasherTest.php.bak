<?php
/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-02-24 at 23:36:13.
 */
class MD5HasherTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var MD5Hasher
     */
    protected $hasher;
    protected $testFilename;
    protected $testData;
    protected $testDataHash;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
      $this->hasher         = new \HashDB2\Hashers\MD5Hasher();
      $this->testDataHash   = "6f8db599de986fab7a21625b7916589c";
      $this->testEmptyHash  = "d41d8cd98f00b204e9800998ecf8427e";
            
      $this->testFilename   = "TESTHASHFILE".mt_rand(999,999999).'.TEST';
      $this->testData       = "test string";
      
      file_put_contents($this->testFilename,$this->testData);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
      if ($this->testFilename != "" && file_exists($this->testFilename))
        unlink($this->testFilename);
    }
    
    /**
     * @covers \HashDB2\Hashers\Hasher::hash
     * @covers \HashDB2\Hashers\Hasher::hashString
     */
    public function testHashString()
    {
      $hash = $this->hasher->hashString($this->testData);
      $this->assertEquals($hash, $this->testDataHash);
    }
    
    /**
     * @covers \HashDB2\Hashers\Hasher::hash
     * @covers \HashDB2\Hashers\Hasher::hashFile
     */
    public function testHashFile()
    {
      $hash = $this->hasher->hashFile($this->testFilename);
      $this->assertEquals($hash, $this->testDataHash);
      $hash = $this->hasher->hashFile($this->testFilename.".BADFILE");
      $this->assertEquals($hash, $this->testEmptyHash);     
    }    

    /**
     * @covers \HashDB2\Hashers\MD5Hasher::__construct
     * @covers \HashDB2\Hashers\Hasher::__construct
     * @covers \HashDB2\Hashers\Hasher::getHashName
     */
    public function testSuccessfulInitializeAndGetHashName()
    {    
      $cn = get_class($this->hasher);
      $parts = explode('\\', $cn);
      $this->assertEquals($parts[count($parts)-1], 'MD5Hasher');
      $this->assertEquals(strtolower($this->hasher->getHashName()), 'md5');
    }
}
